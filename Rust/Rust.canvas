{
	"nodes":[
		{"id":"1febe59221eb9b6c","x":-1404,"y":652,"width":429,"height":192,"type":"text","text":"#### Simple function\n```rust\nfn main(){\n\tprintln!(\"hello\")\n}\n```\n\n"},
		{"id":"b105808283eb2b61","x":-569,"y":622,"width":250,"height":60,"color":"4","type":"text","text":"## Functions"},
		{"id":"7a89c3dd0861697b","x":45,"y":-300,"width":583,"height":727,"color":"2","type":"group","label":"Compound datatypes"},
		{"id":"9b0bd1b890e459af","x":65,"y":59,"width":543,"height":348,"type":"text","text":"#### Array\n - Collection of same type data\n - **Declaring an array**\n\t - With values\n\t\t - `let a = [1, 2, 3, 4, 5];`\n\t - With datatype & length\n\t\t - `let a: [i32; 5] = [1, 2, 3, 4, 5];`\n\t - Repitition\n\t\t - `let a: [3;5];`\n\t\t - means `[3,3,3,3,3]`\n - **Accessing elements**\n\t - `a[1]`"},
		{"id":"14c801ead2ac46cc","x":-1419,"y":-529,"width":435,"height":757,"color":"2","type":"group","label":"Scalar Datatypes"},
		{"id":"070e9b5b706f694d","x":-1399,"y":71,"width":396,"height":119,"type":"text","text":"#### Boolean\n- Simlple `true` & `false`"},
		{"id":"ac2f5ac16ec86f53","x":-1399,"y":-75,"width":396,"height":146,"type":"text","text":"#### Float\n- Two types `f32` & `f64`\n- Eg. `let x:f32 = 5.54;`"},
		{"id":"0785d3f5a1a60aaf","x":65,"y":-280,"width":543,"height":294,"type":"text","text":"#### Tuple\n- Collection of data of various types.\n- Eg. `let tup: (i32, f64, u8) = (500, 6.4, 1);`\n- **Accessing a tuple**\n\t- `tup.0`\n- **Destructuring (unpacking) a tuple**\n\t- `let (x, y, z) = tup;`"},
		{"id":"18af31233ec2066b","x":-1399,"y":-481,"width":396,"height":406,"type":"text","text":"#### Integer\n\n| Length (bits) | Signed | Unsigned |\n| --- | --- | ---|\n| 8 | i8|u8|\n|16||\n|32||\n|64||\n|128||\n|arch| isize|usize|\n\n- Size  of `isize` & `usize` depends on bits/architecture of OS (32/64 bits)"},
		{"id":"08c75b251bf0b2d6","x":-66,"y":-1572,"width":408,"height":808,"color":"4","type":"group","label":"VariablesÂ "},
		{"id":"ed5fc3b7a3afab21","x":-46,"y":-1082,"width":368,"height":257,"type":"text","text":"### Constants\n- Declared using the `const` keyword\n- Datatype must be specified during declaration\n- Eg. `const MAX_VAL:i32 = 100;`"},
		{"id":"ababaf4e81e1a3cb","x":-46,"y":-1276,"width":368,"height":158,"type":"text","text":"### Mutable variables\n- Declared using the  `mut` keyword.\n- Eg. `let mut x: i32 = 10;`"},
		{"id":"abca2dabb30f2754","x":-705,"y":-1411,"width":391,"height":234,"color":"4","type":"text","text":"## Variables\n- Immutable by default\n- Declaration syntax \n\t- `let x = value;`\n\t- `let x: DataType = value;`\n\t- `let x: DataType;`\n"},
		{"id":"37483d2827d678c9","x":-46,"y":-1510,"width":368,"height":194,"type":"text","text":"### Immutables\n- All variables are immutable by default."},
		{"id":"bf363bd6b6e72309","x":-744,"y":-491,"width":601,"height":682,"color":"2","type":"group","label":"Datatypes"},
		{"id":"8416c3510f58a769","x":-719,"y":-466,"width":548,"height":50,"type":"text","text":"## Data Types"},
		{"id":"36c66e9f32aa94d5","x":-719,"y":-240,"width":271,"height":182,"type":"text","text":"### Scalar\n- Hold a single value.\n- Eg. `int` , `bool` , etc."},
		{"id":"2401c190b16ee514","x":-485,"y":-35,"width":314,"height":182,"type":"text","text":"### Compound\n- Can hold multiple values.\n- Eg. `tuple` & `arrays`"},
		{"id":"0c9cc5ebe0ac4d0d","x":141,"y":2237,"width":696,"height":516,"color":"5","type":"text","text":"### If ... else\n\n- Almost same as python\n```rust\nfn main() {\n    let number = 6;\n\n    if number % 4 == 0 {\n        println!(\"number is divisible by 4\");\n    } else if number % 3 == 0 {\n        println!(\"number is divisible by 3\");\n    } else if number % 2 == 0 {\n        println!(\"number is divisible by 2\");\n    } else {\n        println!(\"number is not divisible by 4, 3, or 2\");\n    }\n}\n```"},
		{"id":"e30e69ec578277b5","x":-2204,"y":2002,"width":1333,"height":1285,"color":"5","type":"group","label":"Loops"},
		{"id":"88bcdf95408726b6","x":-1362,"y":2712,"width":433,"height":537,"type":"text","text":"### for\n- Looping through arrays\n\t- if `a` is an array\n\t- `for element in a` \n- Looping through range of nos.\n\t- goes through 1 to 4\n\t- `for i in 1..5`\n\t- goes through 4 to 1\n\t- `for i in (1..5).rev()`\n\n```rust\nfn main() {\n    for number in (1..4).rev() {\n        println!(\"{number}!\");\n    }\n    println!(\"LIFTOFF!!!\");\n}\n```"},
		{"id":"50c3b3aae245a179","x":-2158,"y":2023,"width":561,"height":1245,"type":"text","text":"### loop\n- Its an infinite loop\n- continues till `break` is encountered\n\n```rust\nfn main(){\n\tlet mut x = 0;\n\tloop {\n\t\tx += 1;\n\t\tif x == 10{\n\t\t\tbreak\n\t\t}\n\t}\n}\n```\n\n- **loop can return a value**\n```rust\nfn main(){\n\tlet mut x = 0;\n\tlet y = loop {\n\t\tx += 1;\n\t\tif x == 10{\n\t\t\tbreak x;\n\t\t}\n\t}\n}\n```\n\n- **Labels in loop**\n```rust\nfn main() {\n    let mut count = 0;\n    'counting_up: loop { // counting_up is a label\n        let mut remaining = 10;\n\n        loop {\n            if remaining == 9 {\n                break;\n            }\n            if count == 2 {\n                break 'counting_up;\n            }\n            remaining -= 1;\n        }\n\n        count += 1;\n    }\n    println!(\"End count = {count}\");\n}\n```"},
		{"id":"3f5e906a7449b60f","x":-1551,"y":2023,"width":379,"height":353,"type":"text","text":"### while\n- Syntax:\n```rust\nfn main() {\n    let mut number = 3;\n    \n    while number != 0 {\n        println!(\"{number}!\");\n        number -= 1;\n    }\n    println!(\"LIFTOFF!!!\");\n}\n```"},
		{"id":"496839219648be53","x":-661,"y":2179,"width":410,"height":265,"color":"5","type":"text","text":"## Flow Control\n\n- If .. else\n- Loops\n\t- For\n\t- while\n\t- loop"},
		{"id":"d0db086ed1860111","x":-876,"y":1630,"width":432,"height":193,"color":"3","type":"text","text":"## Comments\n- Comments start with `//`\n"},
		{"id":"8107fa238ed126a9","x":-143,"y":895,"width":1446,"height":1061,"color":"4","type":"group","label":"Statements & Expressions"},
		{"id":"8b1018f11146b305","x":-123,"y":915,"width":544,"height":435,"type":"text","text":"#### Statements vs Expressions\n-   **Statements** are instructions that perform some action and do not return a value.\n-   **Expressions** evaluate to a resultant value.\n\n- If it *ends with*  **`;`**  \n\t- Its *Statement*\n- Else if *end of function*\n\t- Its *Expression*\n"},
		{"id":"24051bd33ad99781","x":602,"y":1133,"width":681,"height":803,"type":"text","text":"##### Examples\n\n```rust\nfn multiply(x:i32, y:i32) -> i32{\n\tx * y // expression becoz it returns value\n}\n```\n\n```rust\nfn multiply(x:i32, y:i32) -> i32{\n\tlet res = x * y; // its a **statement**\n\tres // **expression** becoz it returns value\n}\n```\n\n```rust\nfn multiply(x:i32, y:i32) -> i32{\n\tlet res = x * y; // its a **statement**\n\tres // **NOT expression** becoz its not at the end\n\t\t// also this causes an error (\";\" expexted)\n\n\tlet tmp = res * 1;\n\ttmp // **expression**\n}\n```\n\n```rust\nfn f1() -> i32 {\n\tlet x = true;\n\tlet y = 6;\n\tif x {\n\t\ty // expression\n\t}\n\telse {\n\t\ty - 2 // expression\n\t}\n}\n```"},
		{"id":"c557f972d52cd5f8","x":-816,"y":3568,"width":517,"height":377,"type":"text","text":"## Ownership"},
		{"id":"e3563c562883194c","x":-1426,"y":632,"width":471,"height":738,"color":"4","type":"group","label":"Functions"},
		{"id":"5272e8a816f7d5de","x":-1406,"y":1139,"width":431,"height":211,"type":"text","text":"#### Function with return\n\n```rust\nfn multiply(x:i32, y:i32) -> i32{\n\tx * y\n}\n```\n\n"},
		{"id":"76c2c94fed33b859","x":-1404,"y":877,"width":429,"height":232,"type":"text","text":"#### Function with parameter\n```rust\nfn value(x:i32){\n\tprintln!(\"value is {x}\");\n}\n```\n\n"}
	],
	"edges":[
		{"id":"a7e10a1a17f1cab9","fromNode":"abca2dabb30f2754","fromSide":"right","toNode":"ed5fc3b7a3afab21","toSide":"left"},
		{"id":"396fd6d20663fc48","fromNode":"abca2dabb30f2754","fromSide":"right","toNode":"ababaf4e81e1a3cb","toSide":"left"},
		{"id":"b7ad822219b9278d","fromNode":"abca2dabb30f2754","fromSide":"right","toNode":"37483d2827d678c9","toSide":"left"},
		{"id":"ebe7676318564217","fromNode":"36c66e9f32aa94d5","fromSide":"left","toNode":"18af31233ec2066b","toSide":"right"},
		{"id":"c1018e1aa113c6e4","fromNode":"36c66e9f32aa94d5","fromSide":"left","toNode":"070e9b5b706f694d","toSide":"right"},
		{"id":"061745a0666646ac","fromNode":"36c66e9f32aa94d5","fromSide":"left","toNode":"ac2f5ac16ec86f53","toSide":"right"},
		{"id":"c7eab46cd6aa91ff","fromNode":"2401c190b16ee514","fromSide":"right","toNode":"0785d3f5a1a60aaf","toSide":"left"},
		{"id":"06af03ac293ba8df","fromNode":"2401c190b16ee514","fromSide":"right","toNode":"9b0bd1b890e459af","toSide":"left"},
		{"id":"161761814d41983f","fromNode":"abca2dabb30f2754","fromSide":"bottom","toNode":"bf363bd6b6e72309","toSide":"top","color":"1"},
		{"id":"19869597cff6f839","fromNode":"8416c3510f58a769","fromSide":"bottom","toNode":"36c66e9f32aa94d5","toSide":"top"},
		{"id":"8f35b3974c53c735","fromNode":"8416c3510f58a769","fromSide":"bottom","toNode":"2401c190b16ee514","toSide":"top"},
		{"id":"dd7664b458f67c24","fromNode":"bf363bd6b6e72309","fromSide":"bottom","toNode":"b105808283eb2b61","toSide":"top","color":"1"},
		{"id":"e53f43827b37a332","fromNode":"b105808283eb2b61","fromSide":"left","toNode":"1febe59221eb9b6c","toSide":"right"},
		{"id":"5969a280f2c1a3ab","fromNode":"b105808283eb2b61","fromSide":"left","toNode":"76c2c94fed33b859","toSide":"right"},
		{"id":"91e1a1a8af1cd22d","fromNode":"b105808283eb2b61","fromSide":"right","toNode":"8b1018f11146b305","toSide":"top"},
		{"id":"84bea618b5390e93","fromNode":"b105808283eb2b61","fromSide":"left","toNode":"5272e8a816f7d5de","toSide":"right"},
		{"id":"f0b3c19b7dae386a","fromNode":"b105808283eb2b61","fromSide":"bottom","toNode":"d0db086ed1860111","toSide":"top","color":"1"},
		{"id":"eca42951475af2bc","fromNode":"d0db086ed1860111","fromSide":"bottom","toNode":"496839219648be53","toSide":"top","color":"1"},
		{"id":"6e47f052a8068de5","fromNode":"8b1018f11146b305","fromSide":"right","toNode":"24051bd33ad99781","toSide":"top"},
		{"id":"d0a1b5d685095735","fromNode":"496839219648be53","fromSide":"right","toNode":"0c9cc5ebe0ac4d0d","toSide":"left"},
		{"id":"d02b2e2e29a2c710","fromNode":"496839219648be53","fromSide":"left","toNode":"3f5e906a7449b60f","toSide":"right"},
		{"id":"e3c89401a3a2ba97","fromNode":"496839219648be53","fromSide":"left","toNode":"88bcdf95408726b6","toSide":"top"},
		{"id":"f72a61a39a214100","fromNode":"496839219648be53","fromSide":"left","toNode":"50c3b3aae245a179","toSide":"right"}
	]
}